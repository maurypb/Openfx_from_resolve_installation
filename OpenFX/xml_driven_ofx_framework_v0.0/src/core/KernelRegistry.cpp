#include "KernelRegistry.h"
#include <map>
#include <vector>

/**
 * @brief Auto-generated kernel registry for XML-driven OFX framework
 * 
 * Generated from effects folder containing 1 effect(s):
 * - TestBlurV2 (effects/TestBlurV2.xml)
 *   Inputs: 3 (Source, mask*, selective*)
 *   Parameters: 5 (brightness(double), radius(double), quality(int), maskStrength(double), redness(double))
 * 
 * This file is generated by generate_kernel_registry.py
 * DO NOT EDIT MANUALLY - changes will be overwritten
 * 
 * Legend: * = optional input
 */

// Forward declarations for all kernel functions
extern "C" void call_testblurv2_kernel(
    void* stream,
    int width,
    int height,
    void** textures,
    int textureCount,
    bool* presenceFlags,
    float* output,
    float* floatParams,
    int* intParams,
    bool* boolParams
);


// Registry structure
struct KernelEntry {
    const char* effectName;
    KernelFunction function;
};

// Auto-generated registry table
static const KernelEntry kernelRegistry[] = {
    { "TestBlurV2", (KernelFunction)call_testblurv2_kernel },
};

static const int registrySize = 1;

// Effect names for index lookup
static const char* effectNames[] = {
    "TestBlurV2",
};

KernelFunction getKernelFunction(const std::string& effectName) {
    for (int i = 0; i < registrySize; ++i) {
        if (effectName == kernelRegistry[i].effectName) {
            return kernelRegistry[i].function;
        }
    }
    return nullptr;
}

int getRegisteredEffectCount() {
    return registrySize;
}

std::string getEffectName(int index) {
    if (index >= 0 && index < registrySize) {
        return std::string(effectNames[index]);
    }
    return std::string();
}
